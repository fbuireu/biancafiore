@import 'variables';

@mixin typography-settings($min-value: 0, $preferred-value: 2, $max-value: 0) {
  font-size: clamp(typography-scale($min-value), #{$preferred-value}vw, typography-scale($max-value));
  line-height: line-height($max-value);
}

@mixin breakpoint($breakpoint, $breakpoints: $grid) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint: map-get($breakpoints, $breakpoint);

    @media screen and (min-width: #{$breakpoint}) {
      @content;
    }
  } @else {
    @warn "No value could be retrieved from `#{$breakpoint}`. Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

@mixin set-font-faces($fonts: $fonts) {
  @each $font-type, $font-variants in $fonts {
    @each $properties, $font-variant in $font-variants {
      @font-face {
        @each $property, $value in $font-variant {
          @if $property != 'src' {
            font-#{$property}: $value;
          } @else {
            #{$property}: local(map-get($font-variant, 'family')), $value format('woff2');
          }
        }
      }
    }
  }
}

@function color($base, $shade: main) {
  $color: map-get(map-get($colors, $base), $shade);

  @return $color;
}

@function line-height($level) {
  @return map-get($line-heights, $level);
}

@function typography-scale($level) {
  @return map-get($typography-scale, $level);
}

@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    @if type-of($map) != 'map' {
      @warn '`#{$map}` is not a map.';
      @return false;
    }

    $map: map-get($map, $key);
  }

  @return $map;
}

@function contains($list, $values...) {
  @each $value in $values {
    @if type-of(index($list, $value)) != 'number' {
      @return false;
    }
  }

  @return true;
}
