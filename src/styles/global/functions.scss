@import 'variables';

@mixin typography-settings($min-value: 0, $value: 0, $max-value: 0) {
  font-size: clamp(typography-scale($min-value), typography-scale($value), typography-scale($max-value));
  line-height: line-height($value);
}

@mixin breakpoint($breakpoint, $breakpoints: $grid) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint: map-get($breakpoints, $breakpoint);
  }

  @media screen and (min-width: #{$breakpoint}) {
    @content;
  }
}

@mixin font-properties($group, $variant: regular, $properties: family weight style, $font-stack: $fonts) {
  $font-properties: map-deep-get($font-stack, $group, $variant);

  @if $font-properties {
    @each $property, $values in $font-properties {
      @if contains($properties, $property) {
        font-#{$property}: map-get($font-properties, $property);
      }
    }
  }
}

@function color($base, $shade: main) {
  $color: map-get(map-get($colors, $base), $shade);

  @return $color;
}

@function line-height($level) {
  @return map-get($line-heights, $level);
}

@function typography-scale($level) {
  @return map-get($typography-scale, $level);
}

@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    @if type-of($map) != 'map' {
      @warn '`#{$map}` is not a map.';
      @return false;
    }

    $map: map-get($map, $key);
  }

  @return $map;
}

@function contains($list, $values...) {
  @each $value in $values {
    @if type-of(index($list, $value)) != 'number' {
      @return false;
    }
  }

  @return true;
}
