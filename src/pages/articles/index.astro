---
import { getCollection, getEntry } from "astro:content";
import BaseLayout from "@components/templates/baseLayout/BaseLayout.astro";
import { Image } from "astro:assets";
import MarkdownIt from "markdown-it";
import { generateExcerpt } from "src/ui/shared/utils/generateExcerpt";
import { slugify } from "@shared/utils/slugify";
import { DEFAULT_DATE_FORMAT } from "src/consts";
import "./_articles.css";
import horizontalArrow from "@assets/images/svg/left-arrow.svg";
import type { ImageMetadata } from "astro";
import Breadcrumbs from "@components/molecules/breadcrumbs/Breadcrumbs.astro";

enum ArticleType {
	DEFAULT = "default",
	NO_IMAGE = "no_image",
}

const articles = await getCollection("articles");
const images = import.meta.glob<{ default: ImageMetadata }>("/src/assets/**/*.{jpeg,jpg,png,gif}");

articles.sort((a, b) => new Date(b.data?.publishDate).valueOf() - new Date(a.data?.publishDate).valueOf());

const {
	body: featuredArticleBody,
	data: featuredArticle,
	slug: featuredArticleSlug,
} = articles.find((article) => article.data?.isFeatured && article.data?.featuredImage) ??
articles.find((article) => article.data?.featuredImage);

const parser: MarkdownIt = MarkdownIt("default", {});

const featuredArticleDescription =
	featuredArticle.description ??
	generateExcerpt({
		parser,
		content: featuredArticleBody,
	}).excerpt;

const publishedDate = featuredArticle.publishDate.toLocaleDateString("en", DEFAULT_DATE_FORMAT);
const featuredArticleHref = `/articles/${featuredArticleSlug}`;
const featuredArticleShareUrl = new URL(featuredArticleHref, Astro.url).href;
---

<!-- todo: isolate sections -->
<BaseLayout title="" description="">
  <h1 class="articles__title section-title">The Blog</h1>
  <Breadcrumbs classNames="articles-page" />
  <div class="articles__wrapper">
    <section class="articles__wrapper__inner common-wrapper">
      <div class="featured-article__wrapper">
        <a href={featuredArticleHref}>
          <Image
            class="featured-article__image"
            src={images[featuredArticle.featuredImage]()}
            alt={featuredArticle.title}
          />
        </a>
        <div class="featured-article__details__wrapper flex row-wrap">
          <div class="featured-article__details flex column-wrap">
            <time class="featured-article__publish-date font-sans-serif" datetime={publishedDate}>
              {publishedDate}
            </time>
            <h2 class="featured-article__title">{featuredArticle.title}</h2>
            <p class="featured-article__description">{featuredArticleDescription}</p>
            {
              featuredArticle.tags?.length > 0 && (
                <ul class="featured-article__tags__list">
                  {featuredArticle.tags.map((tag) => (
                    <a class="featured-article__tag__item" href={`/tags/${slugify(tag)}`}>
                      #{tag}
                    </a>
                  ))}
                </ul>
              )
            }
            <a href={featuredArticleHref} class="featured-article__link flex align-center">
              Read More <img src={horizontalArrow.src} alt="Readt more" />
            </a>
          </div>
          <div class="featured-article__share__wrapper flex row-wrap">
            <p class="featured-article__share__title font-serif">SHARE IT!</p>
            <ul class="featured-article__share__links__list flex row-nowrap">
              <li class="featured-article__share__link__item link">
                <a
                  target="_blank"
                  rel="noopener noreferrer"
                  href={`https://www.linkedin.com/sharing/share-offsite/?url=${featuredArticleShareUrl}`}
                >
                  Linkedin
                </a>
              </li>
              <li class="featured-article__share__link__item link">
                <a
                  target="_blank"
                  rel="noopener noreferrer"
                  href={`https://twitter.com/intent/tweet?url=${featuredArticleShareUrl}&text=${featuredArticle.title}&hashtags=${featuredArticle.tags?.join(',')}`}>
                  X (former Twitter)
                </a>
              </li>
            </ul>
          </div>
        </div>
      </div>
      <script type="application/ld+json" set:html={JSON.stringify({
        "@context": "https://schema.org",
        "@type": "ItemList",
        "itemListElement": {
          "@type": "ListItem",
          "position": 0,
          "url": new URL(featuredArticleSlug, Astro.url).href
        }
      })}/>
    </section>
  </div>
  <section class="articles__grid common-wrapper">
    <ul class="articles__grid__list flex row-wrap justify-space-between">
      {
        articles.filter(({ slug }) => slug !== featuredArticleSlug).map(async ({ body, data: article, slug }) => {
          const author = await getEntry(article.author.collection, article.author.slug)
          const description = article.description ?? generateExcerpt({ parser, content: body }).excerpt;
          const publishedDate = article.publishDate.toLocaleDateString('en', DEFAULT_DATE_FORMAT);
          const variant: ArticleType = article.featuredImage ? ArticleType.DEFAULT : ArticleType.NO_IMAGE;

          return (
            <li class="articles__grid__item">
              <a class="article__card__link" href={`/articles/${slug}`} aria-label={article.title} />
              <article
                class:list={[`article__card__wrapper`, {
                  '--default-variant': variant === ArticleType.DEFAULT,
                  '--no-image-variant': variant === ArticleType.NO_IMAGE
                }]}
              >
                {article.featuredImage && (
                  <Image class="article__card__image" src={images[article.featuredImage]()} alt={article.title} />
                )}
                <time class="article__card__publish-date font-sans-serif" datetime={publishedDate}>
                  {publishedDate}
                </time>
                <h2 class="article__card__title font-serif">{article.title}</h2>
                <p class="article__card__author">
                  by <a href={`/tags/${author.data.id}`}>{author.data.name}</a>
                </p>
                <p class="article__card__excerpt">{description}</p>
                {(articles.tags && article.tags?.length > 0) && (
                  <ul class="article__card__tags__list">
                    {article.tags.map((tag) => (
                      <a class="article__card__tag__item" href={`/tags/${slugify(tag)}`}>
                        #{tag}
                      </a>
                    ))}
                  </ul>
                )}
              </article>
            </li>
          );
        })
      }
    </ul>
  </section>
</BaseLayout>
