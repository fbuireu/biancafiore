---
import type { CollectionEntry } from "astro:content";
import { getCollection, getEntry } from "astro:content";
import { Image } from "astro:assets";
import BaseLayout from "@components/templates/baseLayout/BaseLayout.astro";
import "./_article.css";
import { DEFAULT_DATE_FORMAT } from "src/consts";
import { slugify } from "../../ui/shared/ui/utils/slugify";
import type { ImageMetadata } from "astro";
import Breadcrumbs from "@components/molecules/breadcrumbs/Breadcrumbs.astro";
import { generateExcerpt } from "../../ui/shared/application/utils/generateExcerpt";

export const prerender = true;

interface ArticleProps {
	currentArticle: CollectionEntry<"articles">;
}

export async function getStaticPaths() {
	const articles = await getCollection("articles");
	return articles.map(({ slug, ...article }) => {
		return {
			params: { slug },
			props: { currentArticle: article },
		};
	});
}

const MAX_RELATED_ARTICLES = 3;
const images = import.meta.glob<{ default: ImageMetadata }>("/src/assets/**/*.{jpeg,jpg,png,gif}");
const articles = await getCollection("articles");

const { slug } = Astro.params;
const { currentArticle } = Astro.props as ArticleProps;
const { featuredImage, title, author: authorData, publishDate, tags } = currentArticle.data;
const description =
	currentArticle.data.description ?? generateExcerpt({ parser, content: currentArticle.body }).excerpt;
const author = await getEntry(authorData.collection, authorData.slug);

const relatedArticles = articles
	.filter(({ data }) => data.tags?.some((tag) => data.title !== currentArticle.data.title && tags?.includes(tag)))
	.sort((a, b) => new Date(b.data.publishDate).valueOf() - new Date(a.data.publishDate).valueOf())
	.splice(0, MAX_RELATED_ARTICLES);
const { Content } = await currentArticle.render();
---

<BaseLayout {...currentArticle.data}>
  {
    featuredImage && (
      <section class="article__featured__image__wrapper">
        <Image
          src={images[featuredImage]()}
          alt={title}
          class="article__featured__image" />
      </section>
    )
  }
  <Breadcrumbs classNames="article-page" />
  <div class="article__details">
    <h1 class="article__title">
      {title}
    </h1>
    <p class="article__author">by <a href={`/tags/${author.data.id}`}>{author.data.name}</a></p>
    <time class="article__publish-date font-sans-serif" datetime={String(publishDate)}>
      {publishDate.toLocaleDateString('en', DEFAULT_DATE_FORMAT)}
    </time>
    {
      tags?.length > 0 && (
        <ul class="article__tags__list flex row-wrap">
          {tags.map((tag) => (
            <li class="article__tag__item">
              <a href={`/tags/${slugify(tag)}`}>#{tag}</a>
            </li>
          ))}
        </ul>
      )
    }
  </div>
  <article class="article__wrapper">
    <Content />
  </article>
  <script type="application/ld+json" set:html={JSON.stringify(  {
    "@context": "https://schema.org",
    "@type": "Article",
    "headline": title,
    "description": description,
    ...(featuredImage && {"image": featuredImage}),
    "datePublished": new Date(publishDate).toISOString(),
    "dateModified": new Date(publishDate).toISOString(),
    "author": {
      "@type": "Person",
      "name": author.data.name,
      "jobTitle": author.data.jobTitle,
      "url": new URL("/about", import.meta.env.PUBLIC_SITE_URL)
    },
    "publisher": {
      "name": author.data.name,
      "url": new URL(import.meta.env.PUBLIC_SITE_URL)
    },
    "mainEntityOfPage": {
      "@type": "WebPage",
      "@id": Astro.url.href
    }
  })}/>
  {
    relatedArticles.length > 0 && (
      <section class="related-articles__wrapper">
        <h3 class="related-articles__title section-title">You might also like</h3>
        <ul class="related-articles__list flex row-wrap">
          {relatedArticles.map(async (article) => {
            const author = await getEntry(authorData.collection, authorData.slug)
           return <li class="related-articles__item flex">
              <a href={`/articles/${article.slug}`} class="related__article__link">
                <h4 class="related__article__title">{article.data.title}</h4>
                <p class="related__article__author">by {author.data.name}</p>
              </a>
            </li>
          })}
        </ul>
      </section>
      <script type="application/ld+json" set:html={JSON.stringify({
        "@context": "https://schema.org",
        "@type": "ItemList",
        "itemListElement": relatedArticles.map((article, index) => ({
          "@type": "ListItem",
          "position": index + 1,
          "url": new URL(article.slug, Astro.url).href
        }))
      })}/>
    )}
</BaseLayout>
