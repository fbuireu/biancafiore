---
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import { Image } from "astro:assets";
import BaseLayout from "@components/templates/baseLayout/BaseLayout.astro";
import "./_article.css";
import { DEFAULT_DATE_FORMAT } from "src/consts";
import { slugify } from "@shared/utils/slugify";
import type { ImageMetadata } from "astro";
import Breadcrumbs from "@components/molecules/breadcrumbs/Breadcrumbs.astro";

export const prerender = true;

interface ArticleProps {
	currentArticle: CollectionEntry<"articles">;
}

export async function getStaticPaths() {
	const articles = await getCollection("articles");
	return articles.map(({ slug, ...article }) => {
		return {
			params: { slug },
			props: { currentArticle: article },
		};
	});
}

const MAX_RELATED_ARTICLES = 3;
const images = import.meta.glob<{ default: ImageMetadata }>("/src/assets/**/*.{jpeg,jpg,png,gif}");
const articles = await getCollection("articles");

const { slug } = Astro.params;
const { currentArticle } = Astro.props as ArticleProps;
const { featuredImage, author, title, publishDate, tags } = currentArticle.data;
const relatedArticles = articles
	.filter(({ data }) => data.tags?.some((tag) => data.title !== currentArticle.data.title && tags?.includes(tag)))
	.sort((a, b) => new Date(b.data.publishDate).valueOf() - new Date(a.data.publishDate).valueOf())
	.splice(0, MAX_RELATED_ARTICLES);
const { Content } = await currentArticle.render();
---

<BaseLayout {...currentArticle.data}>
  {
    featuredImage && (
      <section class="article__featured__image__wrapper">
        <Image
          src={images[featuredImage]()}
          alt={title}
          class="article__featured__image" />
      </section>
    )
  }
  <Breadcrumbs classNames="article-page" />
  <div class="article__details">
    <h1 class="article__title">
      {title}
    </h1>
    <p class="article__author">by <a href={`/tags/${slugify(author)}`}>{author}</a></p>
    <time class="article__publish-date font-sans-serif" datetime={String(publishDate)}>
      {publishDate.toLocaleDateString('en', DEFAULT_DATE_FORMAT)}
    </time>
    {
      (tags && tags?.length > 0) && (
        <ul class="article__tags__list flex row-wrap">
          {tags.map((tag) => (
            <li class="article__tag__item">
              <a href={`/tags/${slugify(tag)}`}>#{tag}</a>
            </li>
          ))}
        </ul>
      )
    }
  </div>
  <article class="article__wrapper">
    <Content />
  </article>

  {
    relatedArticles.length > 0 &&
    <section class="related-articles__wrapper">
      <h3 class="related-articles__title section-title">You might also like</h3>
      <ul class="related-articles__list flex row-wrap">
        {relatedArticles.map((article) => (
          <li class="related-articles__item flex">
              <a href={`/articles/${article.slug}`} class="related__article__link">
                <h4 class="related__article__title">{article.data.title}</h4>
                <p class="related__article__author">by {article.data?.author}</p>
              </a>
          </li>
        ))}
      </ul>
    </section>
  }

</BaseLayout>
