---
import { Image } from "astro:assets";
import { articleDTO } from "@application/dto/article/articleDTO";
import type { RawArticle } from "@application/dto/article/types";
import Breadcrumbs from "@components/molecules/breadcrumbs/Breadcrumbs.astro";
import RelatedArticles from "@components/organisms/relatedArticles/RelatedArticles.astro";
import BaseLayout from "@components/templates/baseLayout/BaseLayout.astro";
import { client } from "@lib/contentful";
import type { InferGetStaticParamsType, InferGetStaticPropsType } from "astro";
import "./_article.css";

export const prerender = true;

type ArticleProps = InferGetStaticPropsType<typeof getStaticPaths>;
type ArticleParams = InferGetStaticParamsType<typeof getStaticPaths>;

export async function getStaticPaths() {
	const { items: rawArticles } = (await client.getEntries<RawArticle>({
		content_type: "articles",
	})) as RawArticle[];

	return articleDTO.render(rawArticles).map((article) => {
		return {
			params: {
				slug: article.slug,
			},
			props: {
				article,
			},
		};
	});
}

const { pathname } = Astro.url;
const { slug } = Astro.params as ArticleParams;
const { article } = Astro.props as ArticleProps;
---

<BaseLayout {...article}>
  {
    article.featuredImage && (
          <section class="article__featured__image__wrapper">
              <Image
                  src={article.featuredImage.url}
                  width={article.featuredImage.details.width}
                  height={article.featuredImage.details.height}
                  alt={article.title}
                  class="article__featured__image"
                  transition:name=`featured-image-${pathname}`
              />
          </section>
      )
  }
    <Breadcrumbs classNames="article-page" />
    <div class="article__details">
        <h1 class="article__title">
          {article.title}
        </h1>
        <p class="article__author">by <a href={`/tags/${article.author.slug}`}>{article.author.name}</a></p>
        <time class="article__publish-date font-sans-serif" datetime={article.publishDate}>
          {article.publishDate}
        </time>
      {
        article.tags?.length > 0 && (
              <ul class="article__tags__list flex row-wrap">
                {article.tags.map(({ slug, name }) => (
                    <li class="article__tag__item">
                        <a href={`/tags/${slug}`}>#{name}</a>
                    </li>
                ))}
              </ul>
          )
      }
    </div>
  <article class="article__wrapper" set:html={article.content} />
    <script type="application/ld+json" set:html={JSON.stringify({
      '@context': 'https://schema.org',
      '@type': 'Article',
      'headline': article.title,
      'description': article.description,
      ...(article.featuredImage && { 'image': article.featuredImage }),
      'datePublished': new Date(String(article.publishDate)).toISOString(),
      'dateModified': new Date(String(article.publishDate)).toISOString(),
      'author': {
        '@type': 'Person',
        'name': article.author.name,
        'jobTitle': article.author.jobTitle,
        'url': new URL('/about', import.meta.env.PUBLIC_SITE_URL),
      },
      'publisher': {
        'name': article.author.name,
        'url': new URL(import.meta.env.PUBLIC_SITE_URL),
      },
      'mainEntityOfPage': {
        '@type': 'WebPage',
        '@id': Astro.url.href,
      },
    })} />
    <RelatedArticles article={article} />
</BaseLayout>
