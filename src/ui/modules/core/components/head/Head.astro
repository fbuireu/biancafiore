---
import { GOOGLE_ANALYTICS_ID, GOOGLE_TAG_MANAGER_ID } from "astro:env/client";
import { ClientRouter } from "astro:transitions";
import type { SeoMetadata } from "@const/types";
import Seo from "@modules/core/components/seo/Seo.astro";
import "@styles/index.css";
import { Font } from "astro:assets";

type HeadProps = SeoMetadata;

const props = Astro.props as HeadProps;
---
<head lang="en">
    <Font cssVariable="--font-nunito-sans" preload />
    <Font cssVariable="--font-baskervville" preload />
    <script is:inline type="text/partytown" async
            src=`https://www.googletagmanager.com/gtag/js?id=${GOOGLE_ANALYTICS_ID}` />
    <script is:inline define:vars={{ GOOGLE_TAG_MANAGER_ID }}>
      (function(w, d, s, l, i) {
        w[l] = w[l] || [];
        w[l].push({
          'gtm.start':
              new Date().getTime(), event: 'gtm.js',
        });
        var f = d.getElementsByTagName(s)[0],
            j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : '';
        j.async = true;
        j.src =
            'https://www.googletagmanager.com/gtm.js?id=' + i + dl;
        f.parentNode.insertBefore(j, f);
      })(window, document, 'script', 'dataLayer', GOOGLE_TAG_MANAGER_ID);
    </script>
    <ClientRouter />
    <Seo {...props} />
</head>
<script is:inline define:vars={{ GOOGLE_ANALYTICS_ID }}>
  window.dataLayer = window.dataLayer || [];

  const gtag = () => {
    dataLayer.push(arguments);
  };

  const getCookieValue = (name) => {
    const COOKIE_PATTERN_REGEX = `(^| )'${name}'=([^;]+)`;

    const match = document.cookie.match(new RegExp(COOKIE_PATTERN_REGEX));
    return match ? decodeURIComponent(match[2]) : null;
  };

  const getConsentStatusFromCookie = (cookieName) => {
    let consentStatus = 'denied';

    try {
      const cookieValue = getCookieValue(cookieName);
      if (cookieValue) {
        const cookieData = JSON.parse(cookieValue);
        if (Array.isArray(cookieData.categories) && cookieData.categories.includes('analytics')) {
          consentStatus = 'granted';
        }
      }
    } catch (error) {
      console.warn('Failed to parse cookie data', error);
    }

    return consentStatus;
  };

  const analyticsConsentStatus = getConsentStatusFromCookie('cc_cookie');

  gtag('js', new Date());
  gtag('config', GOOGLE_ANALYTICS_ID);
  gtag('consent', 'default', {
    'analytics_storage': analyticsConsentStatus,
  });
</script>
